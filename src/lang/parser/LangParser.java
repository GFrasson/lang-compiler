package lang.parser;

import lang.ast.*;
import java.io.IOException;
import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "lang.grammar".
 */
public class LangParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjbtcSLMCOnt$dd4dBq6JcbgMa8bacAcEeQ9HfiYGgHSeIeIWI8jeej56Ho4wBoaxMB94" +
		"b#xvbZUnaINPUttFkSyyzznfz#Yz$TC$dTvxzEU$#l5VoRz7HwgR3T80ELdVrK4yTehxLwT" +
		"oBwgKMwg83jR$xGoN$uREEsJRergDk73EvStecLIkITZEfjfeYxQdTerd#1gcvIjLQfscu#" +
		"nhFM8gykgWjCVMKqYbuTjG#wgmAZIPkQ29kTcmfrruwMsTfiAuXLvbsJLhSZ#vLZLHlB4sr" +
		"VKvCzgjDjOjPnkLPqkqvKErLY5UnDYKsxNb9mYkPDSDVh2awtAHJSomXtqi3RMpsqBvcEIg" +
		"oR8B7CVHY2qrJaKvGVUJZpQDtrACdTOR9LqSHytLU8b#PngY6Dd9$QJDjgu3ehNG#aLkpjo" +
		"h8LzTzRz5#jbNkkeYl84y7sui$goQPPfXl4slrtlQLNkeKSvKnLnLpuQZj5t5TOzr1CTSdv" +
		"ewCkUDYRaZCdHvpPyRSg9WxrxWnxa$wMg06zFTatQHcZ45T#XkEmkUwIfipRnjh5cDmWwvN" +
		"GvseGMw5nkfopNHhw6CTx3KrMpl0ZudcurBjf5RgfvIxqRsYaUvvzv4kr3Jt6Pa7wp9MvYp" +
		"y9scYhiJd2J9VXsuUs5ADr5ZRQ3krr32rKRleEPHPF4BzTQm6k1VS3Jf9vsYyHkW2V2Rh8a" +
		"rmpsag$7ItL5Uuxzod#DTtFz2k6zs7cWEjBu5hDLSUynRGMtf7gsknj#fKgolaLDsUFkr8N" +
		"qIhglTPrsmRTEjJbvt91ZbI4KzMge#q6Qjz2rPXGoGl8MMzMd96xuVdnfmqTVdQRdXsJtWM" +
		"nfPwd7QLxFqKcJpMO4cEfH0vnTdYaIit9fihQ$7oBBcj3dFxvhbxmYkPDSDtONzciZRAiOH" +
		"yDcypTc7IgtLqtXLpCgKu6zepaZwMjCTMaKUJk8VT8haLSZPVCNnRzhBeIocdf4$DA2Uo3L" +
		"byyddnc7PDjAf7nFiv$MsArDpifNcj$dznOLzRCNAbd8fbzBSOkKqq2aLKsG2v8be3dQWHU" +
		"t4I7y3CR4kDw4WlMt0s5zFN5D4jUCBvE0Y#D5g1wTLJ0gs2XYiW5UbJF8svLOHy4pA7DErV" +
		"59w9V3E8Ta3ZwF6OnM8qXRmBUVPWDGTHrj0ddCyIrbF8bz3USBSqu0czooAVOZLm3itMFDA" +
		"2iGf$tX9UMqf#UIXdmEzBy0lsvq3FjCxlO37ZmCNWC9DlJSQQRoVqRQ53eOz0Xw3y5JhGyZ" +
		"kBJQ4Rb8WRoMixz1MWdVbqCTieNgsGkuB3JGVnThISh5VlH6WbT1Yq6$RZe9bsFixh6EZcq" +
		"C7G$j3X5ZlMw2JB6wxz6T3ZJN#jwK$WDP$OeVbzjcyinETyYxaB#KoBEnKCT$pGZJBT1Rng" +
		"GyU04V0FOSjy$rpuvj3pWBLVJw5RLlrtzJAsgunV3j#6kD6MgxlfLw9$stIbl5OXppRv8bu" +
		"DeHU2dc2SwSU3I$33xfy19e1UPhi2z36UzU1F16LWAkXh#abWcl4pmMGm7J17$YpGpsnpm1" +
		"HmAPYHDwOsddwjwlkUrUDxKc9CLbVddvTxWEKeCdbcmhROR7NpuvZ6LMPhQNJNn7TVCrsPq" +
		"Ru9stAZAup#PD$QC$7THKQN6brcz0MZhoPytqhmxoNu5MlhTyBliomVpftUGVTrdi$01Fzz" +
		"hiqFZFOs#vgrVElt1Cy#oCuFyPdzN92NltPUZinQQfRdDoGyRn9oVwEdvVdj3JOrVf3Hgd#" +
		"trTy$iwwWf#JPkkRAMY3xkR$Tx#wtMFe9$6ByQl2#Uy#zwtvLpizz1RwDkELkLQnb7jpRiV" +
		"HMz7xJ9CunjmGy74cBmOFW0N0$kCyznljHnsdYxdMSlUuUjyZTxUvoTxextEt8ywAusy2j4" +
		"RV0pK#qPs7CiIVTzMwkkzdTucvA#xWtpCPvuru3pxZNJVDIDejxDgU7d5jkcNiweVa2h7HV" +
		"vdXzRFG3zqbuIlAlkmDLAxnxSDu3Z$j5MA7Jg8ZWKtS5FEfq3Mft0JSU0OyABH1My13X$KN" +
		"0eqRKecPxmATo2tXKwe2AwLFPFU1JtmKywaS1jRE0cXm0ZyeSteO2K0FKD1f4gCHMIMndOZ" +
		"j7VWKHof7BaQkWLP5#8#gsJwKERtSUyBdZ2NZS10guZmJ0urOI63pk9m7mkAK4rS0tUF#1W" +
		"1kmG2Q#9ZVWW5j2U5Ce005t6G$ut6W4FEvtFhSBNpt$0QgsVjy=");

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

  private boolean good;
          
  public boolean isGood() { return good; }
          
  protected void recoverFromError(Symbol token, TokenStream in) throws IOException, Parser.Exception {
    super.recoverFromError(token, in);
    good = false;
  }

	private final Action[] actions;

	public LangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] lst$Def = Def
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [1] lst$Def = lst$Def Def
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [2] opt$lst$Def = 
			Action.RETURN,	// [3] opt$lst$Def = lst$Def
			new Action() {	// [4] Prog = opt$lst$Def.def
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_def = _symbols[offset + 1];
					final ArrayList _list_def = (ArrayList) _symbol_def.value;
					final Node[] def = _list_def == null ? new Node[0] : (Node[]) _list_def.toArray(new Node[_list_def.size()]);
					 return def;
				}
			},
			new Action() {	// [5] Def = Data.data
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_data = _symbols[offset + 1];
					final Node data = (Node) _symbol_data.value;
					 return ;
				}
			},
			new Action() {	// [6] Def = Fun.fun
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_fun = _symbols[offset + 1];
					final Node fun = (Node) _symbol_fun.value;
					 return ;
				}
			},
			new Action() {	// [7] lst$Decl = Decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [8] lst$Decl = lst$Decl Decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [9] opt$lst$Decl = 
			Action.RETURN,	// [10] opt$lst$Decl = lst$Decl
			new Action() {	// [11] Data = DATA TYPE_NAME.typeName OPEN_CURLY_BRACE opt$lst$Decl.decl CLOSE_CURLY_BRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol typeName = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 4];
					final ArrayList _list_decl = (ArrayList) _symbol_decl.value;
					final Node[] decl = _list_decl == null ? new Node[0] : (Node[]) _list_decl.toArray(new Node[_list_decl.size()]);
					 return ;
				}
			},
			new Action() {	// [12] Decl = ID.id DOUBLE_COLON Type SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return ;
				}
			},
			Action.NONE,  	// [13] opt$Params = 
			Action.RETURN,	// [14] opt$Params = Params
			Action.NONE,  	// [15] opt$TypeDef = 
			Action.RETURN,	// [16] opt$TypeDef = TypeDef
			new Action() {	// [17] lst$Cmd = Cmd
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [18] lst$Cmd = lst$Cmd Cmd
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [19] opt$lst$Cmd = 
			Action.RETURN,	// [20] opt$lst$Cmd = lst$Cmd
			new Action() {	// [21] Fun = ID.id OPEN_PARENTHESIS opt$Params.params CLOSE_PARENTHESIS opt$TypeDef.typeDef OPEN_CURLY_BRACE opt$lst$Cmd.cmd CLOSE_CURLY_BRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_params = _symbols[offset + 3];
					final Node params = (Node) _symbol_params.value;
					final Symbol typeDef = _symbols[offset + 5];
					final Symbol _symbol_cmd = _symbols[offset + 7];
					final ArrayList _list_cmd = (ArrayList) _symbol_cmd.value;
					final Node[] cmd = _list_cmd == null ? new Node[0] : (Node[]) _list_cmd.toArray(new Node[_list_cmd.size()]);
					 return ;
				}
			},
			new Action() {	// [22] lst$TypeList = TypeList
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [23] lst$TypeList = lst$TypeList TypeList
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [24] opt$lst$TypeList = 
			Action.RETURN,	// [25] opt$lst$TypeList = lst$TypeList
			RETURN3,	// [26] TypeDef = COLON Type opt$lst$TypeList; returns 'opt$lst$TypeList' although none is marked
			RETURN2,	// [27] TypeList = COMMA Type; returns 'Type' although none is marked
			new Action() {	// [28] lst$ParamsTypeList = ParamsTypeList
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [29] lst$ParamsTypeList = lst$ParamsTypeList ParamsTypeList
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [30] opt$lst$ParamsTypeList = 
			Action.RETURN,	// [31] opt$lst$ParamsTypeList = lst$ParamsTypeList
			new Action() {	// [32] Params = ID.id DOUBLE_COLON Type.type opt$lst$ParamsTypeList.paramsTypeList
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_type = _symbols[offset + 3];
					final Node type = (Node) _symbol_type.value;
					final Symbol paramsTypeList = _symbols[offset + 4];
					 return ;
				}
			},
			RETURN4,	// [33] ParamsTypeList = COMMA ID DOUBLE_COLON Type; returns 'Type' although none is marked
			new Action() {	// [34] Type = Type.type OPEN_BRACKET CLOSE_BRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_type = _symbols[offset + 1];
					final Node type = (Node) _symbol_type.value;
					 return ;
				}
			},
			new Action() {	// [35] Type = BType.bType
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_bType = _symbols[offset + 1];
					final Node bType = (Node) _symbol_bType.value;
					 return ;
				}
			},
			new Action() {	// [36] BType = TYPE_NAME.typeName
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol typeName = _symbols[offset + 1];
					 return ;
				}
			},
			new Action() {	// [37] Cmd = OPEN_CURLY_BRACE opt$lst$Cmd.cmd CLOSE_CURLY_BRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_cmd = _symbols[offset + 2];
					final ArrayList _list_cmd = (ArrayList) _symbol_cmd.value;
					final Node[] cmd = _list_cmd == null ? new Node[0] : (Node[]) _list_cmd.toArray(new Node[_list_cmd.size()]);
					 return ;
				}
			},
			new Action() {	// [38] Cmd = IF OPEN_PARENTHESIS Exp.exp CLOSE_PARENTHESIS Cmd.cmd
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_exp = _symbols[offset + 3];
					final Node exp = (Node) _symbol_exp.value;
					final Symbol _symbol_cmd = _symbols[offset + 5];
					final Node cmd = (Node) _symbol_cmd.value;
					 return ;
				}
			},
			new Action() {	// [39] Cmd = IF OPEN_PARENTHESIS Exp.exp CLOSE_PARENTHESIS Cmd.cmd ELSE Cmd.cmd
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_exp = _symbols[offset + 3];
					final Node exp = (Node) _symbol_exp.value;
					final Symbol _symbol_cmd = _symbols[offset + 5];
					final Node cmd = (Node) _symbol_cmd.value;
					final Symbol _symbol_cmd = _symbols[offset + 7];
					final Node cmd = (Node) _symbol_cmd.value;
					 return ;
				}
			},
			new Action() {	// [40] Cmd = ITERATE OPEN_PARENTHESIS Exp.exp CLOSE_PARENTHESIS Cmd.cmd
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_exp = _symbols[offset + 3];
					final Node exp = (Node) _symbol_exp.value;
					final Symbol _symbol_cmd = _symbols[offset + 5];
					final Node cmd = (Node) _symbol_cmd.value;
					 return ;
				}
			},
			new Action() {	// [41] Cmd = READ LValue.lValue SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_lValue = _symbols[offset + 2];
					final Node lValue = (Node) _symbol_lValue.value;
					 return ;
				}
			},
			new Action() {	// [42] Cmd = PRINT Exp.exp SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_exp = _symbols[offset + 2];
					final Node exp = (Node) _symbol_exp.value;
					 return ;
				}
			},
			new Action() {	// [43] lst$CmdExpList = CmdExpList
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [44] lst$CmdExpList = lst$CmdExpList CmdExpList
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [45] opt$lst$CmdExpList = 
			Action.RETURN,	// [46] opt$lst$CmdExpList = lst$CmdExpList
			new Action() {	// [47] Cmd = RETURN Exp.exp opt$lst$CmdExpList SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_exp = _symbols[offset + 2];
					final Node exp = (Node) _symbol_exp.value;
					 return ;
				}
			},
			new Action() {	// [48] Cmd = LValue.lValue EQUAL Exp.exp SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_lValue = _symbols[offset + 1];
					final Node lValue = (Node) _symbol_lValue.value;
					final Symbol _symbol_exp = _symbols[offset + 3];
					final Node exp = (Node) _symbol_exp.value;
					 return ;
				}
			},
			Action.NONE,  	// [49] opt$Exps = 
			Action.RETURN,	// [50] opt$Exps = Exps
			Action.NONE,  	// [51] opt$ReturnParams = 
			Action.RETURN,	// [52] opt$ReturnParams = ReturnParams
			new Action() {	// [53] Cmd = ID OPEN_PARENTHESIS opt$Exps.exps CLOSE_PARENTHESIS opt$ReturnParams.returnParams SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_exps = _symbols[offset + 3];
					final Node exps = (Node) _symbol_exps.value;
					final Symbol returnParams = _symbols[offset + 5];
					 return ;
				}
			},
			RETURN2,	// [54] CmdExpList = COMMA Exp.exp
			RETURN2,	// [55] LValueList = COMMA LValue.lvalue
			new Action() {	// [56] lst$LValueList = LValueList
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [57] lst$LValueList = lst$LValueList LValueList
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [58] opt$lst$LValueList = 
			Action.RETURN,	// [59] opt$lst$LValueList = lst$LValueList
			RETURN2,	// [60] ReturnParams = LESS_THAN LValue.lvalue opt$lst$LValueList GREATER_THAN
			new Action() {	// [61] Exp = Exp.expLeft AND Exp2.expRight
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expLeft = _symbols[offset + 1];
					final Node expLeft = (Node) _symbol_expLeft.value;
					final Symbol expRight = _symbols[offset + 3];
					 return ;
				}
			},
			Action.RETURN,	// [62] Exp = Exp2
			new Action() {	// [63] Exp2 = Exp2.expLeft COMPARISON Exp3.expRight
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol expLeft = _symbols[offset + 1];
					final Symbol expRight = _symbols[offset + 3];
					 return ;
				}
			},
			new Action() {	// [64] Exp2 = Exp2.expLeft NOT_EQUAL Exp3.expRight
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol expLeft = _symbols[offset + 1];
					final Symbol expRight = _symbols[offset + 3];
					 return ;
				}
			},
			Action.RETURN,	// [65] Exp2 = Exp3
			new Action() {	// [66] Exp3 = Exp3.expLeft LESS_THAN Exp4.expRight
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol expLeft = _symbols[offset + 1];
					final Symbol expRight = _symbols[offset + 3];
					 return ;
				}
			},
			Action.RETURN,	// [67] Exp3 = Exp4
			new Action() {	// [68] Exp4 = Exp.expLeft PLUS Exp.expRight
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expLeft = _symbols[offset + 1];
					final Node expLeft = (Node) _symbol_expLeft.value;
					final Symbol _symbol_expRight = _symbols[offset + 3];
					final Node expRight = (Node) _symbol_expRight.value;
					 return ;
				}
			},
			new Action() {	// [69] Exp4 = Exp.expLeft MINUS Exp.expRight
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expLeft = _symbols[offset + 1];
					final Node expLeft = (Node) _symbol_expLeft.value;
					final Symbol _symbol_expRight = _symbols[offset + 3];
					final Node expRight = (Node) _symbol_expRight.value;
					 return ;
				}
			},
			new Action() {	// [70] Exp4 = Exp.expLeft TIMES Exp.expRight
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expLeft = _symbols[offset + 1];
					final Node expLeft = (Node) _symbol_expLeft.value;
					final Symbol _symbol_expRight = _symbols[offset + 3];
					final Node expRight = (Node) _symbol_expRight.value;
					 return ;
				}
			},
			new Action() {	// [71] Exp4 = Exp.expLeft DIVISION Exp.expRight
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expLeft = _symbols[offset + 1];
					final Node expLeft = (Node) _symbol_expLeft.value;
					final Symbol _symbol_expRight = _symbols[offset + 3];
					final Node expRight = (Node) _symbol_expRight.value;
					 return ;
				}
			},
			new Action() {	// [72] Exp4 = Exp.expLeft MODULUS Exp.expRight
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expLeft = _symbols[offset + 1];
					final Node expLeft = (Node) _symbol_expLeft.value;
					final Symbol _symbol_expRight = _symbols[offset + 3];
					final Node expRight = (Node) _symbol_expRight.value;
					 return ;
				}
			},
			new Action() {	// [73] Exp4 = NOT Exp.exp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_exp = _symbols[offset + 2];
					final Node exp = (Node) _symbol_exp.value;
					 return ;
				}
			},
			new Action() {	// [74] Exp4 = MINUS Exp.expRight
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expRight = _symbols[offset + 2];
					final Node expRight = (Node) _symbol_expRight.value;
					 return ;
				}
			},
			new Action() {	// [75] Exp4 = BOOLEAN.boolean
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol boolean = _symbols[offset + 1];
					 return ;
				}
			},
			new Action() {	// [76] Exp4 = NULL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return ;
				}
			},
			new Action() {	// [77] Exp4 = INT.int
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol int = _symbols[offset + 1];
					 return ;
				}
			},
			new Action() {	// [78] Exp4 = FLOAT.float
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol float = _symbols[offset + 1];
					 return ;
				}
			},
			new Action() {	// [79] Exp4 = CHAR.char
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol char = _symbols[offset + 1];
					 return ;
				}
			},
			new Action() {	// [80] Exp4 = LValue.lValue
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_lValue = _symbols[offset + 1];
					final Node lValue = (Node) _symbol_lValue.value;
					 return ;
				}
			},
			new Action() {	// [81] Exp4 = OPEN_PARENTHESIS Exp.exp CLOSE_PARENTHESIS
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_exp = _symbols[offset + 2];
					final Node exp = (Node) _symbol_exp.value;
					 return ;
				}
			},
			Action.NONE,  	// [82] opt$VectorDef = 
			Action.RETURN,	// [83] opt$VectorDef = VectorDef
			new Action() {	// [84] Exp4 = NEW Type.type opt$VectorDef.vectorDef
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_type = _symbols[offset + 2];
					final Node type = (Node) _symbol_type.value;
					final Symbol vectorDef = _symbols[offset + 3];
					 return ;
				}
			},
			new Action() {	// [85] Exp4 = ID OPEN_PARENTHESIS opt$Exps.exps CLOSE_PARENTHESIS OPEN_BRACKET Exp.exp CLOSE_BRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_exps = _symbols[offset + 3];
					final Node exps = (Node) _symbol_exps.value;
					final Symbol _symbol_exp = _symbols[offset + 6];
					final Node exp = (Node) _symbol_exp.value;
					 return ;
				}
			},
			RETURN2,	// [86] VectorDef = OPEN_BRACKET Exp.exp CLOSE_BRACKET
			new Action() {	// [87] LValue = ID.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return ;
				}
			},
			new Action() {	// [88] LValue = LValue.lValue OPEN_BRACKET Exp.exp CLOSE_BRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_lValue = _symbols[offset + 1];
					final Node lValue = (Node) _symbol_lValue.value;
					final Symbol _symbol_exp = _symbols[offset + 3];
					final Node exp = (Node) _symbol_exp.value;
					 return ;
				}
			},
			new Action() {	// [89] LValue = LValue.lValue DOT ID.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_lValue = _symbols[offset + 1];
					final Node lValue = (Node) _symbol_lValue.value;
					final Symbol id = _symbols[offset + 3];
					 return ;
				}
			},
			new Action() {	// [90] lst$ExpList = ExpList
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [91] lst$ExpList = lst$ExpList ExpList
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [92] opt$lst$ExpList = 
			Action.RETURN,	// [93] opt$lst$ExpList = lst$ExpList
			new Action() {	// [94] Exps = Exp.exp opt$lst$ExpList.expList
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_exp = _symbols[offset + 1];
					final Node exp = (Node) _symbol_exp.value;
					final Symbol expList = _symbols[offset + 2];
					 return ;
				}
			},
			RETURN2	// [95] ExpList = COMMA Exp.exp
		};

 good = true;
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
