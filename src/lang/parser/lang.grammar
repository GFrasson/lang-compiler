%package "lang.parser";
%import "lang.ast.*";
%import "java.io.IOException";

%class "LangParser";

%terminals INT, FLOAT, FALSE, TRUE,
    NULL, IF, ELSE, DATA, ITERATE, RETURN, PRINT, READ, NEW,
    ID, TYPE_INT, TYPE_FLOAT, TYPE_BOOL, TYPE_CHAR, TYPE_NAME, CHAR, 
    OPEN_PARENTHESIS, CLOSE_PARENTHESIS, OPEN_BRACKET, CLOSE_BRACKET, OPEN_CURLY_BRACE, CLOSE_CURLY_BRACE,
    GREATER_THAN, LESS_THAN, SEMICOLON, DOUBLE_COLON, COLON, DOT, COMMA,
    COMPARISON, EQUAL, NOT_EQUAL,
    PLUS, MINUS, TIMES, DIVISION, MODULUS,
    AND, NOT;

%left CLOSE_PARENTHESIS, CLOSE_BRACKET, DOT;
%right NOT, MINUS;
%left TIMES, DIVISION, MODULUS;
%left PLUS, MINUS;
%nonassoc LESS_THAN;
%left COMPARISON, NOT_EQUAL;
%left AND;

%embed {:
  private boolean good;
          
  public boolean isGood() { return good; }
          
  protected void recoverFromError(Symbol token, TokenStream in) throws IOException, Parser.Exception {
    super.recoverFromError(token, in);
    good = false;
  }
:};

%init {: good = true; :};

%typeof INT = "Integer";
%typeof FLOAT = "Float";
%typeof CHAR = "Character";
%typeof FALSE = "Boolean";
%typeof TRUE = "Boolean";
%typeof Prog = "Node";
%typeof Def = "Node";
%typeof Data = "Node";
%typeof Decl = "Node";
%typeof Fun = "Node";
%typeof ReturnType = "Type";
%typeof Params = "Node";
%typeof Type = "Node";
%typeof BType = "Node";
%typeof Cmd = "Node";
%typeof Exp = "Expression";
%typeof LValue = "Node";
%typeof Exps = "Node";

%goal Prog;

Prog = Def.def*      {: return Program(def.data, def.fun); :}
     ;

Def = Data.data      {: return data; :}
    | Fun.fun        {: return fun; :}
    ;

Data = DATA TYPE_NAME.typeName OPEN_CURLY_BRACE Decl.decl* CLOSE_CURLY_BRACE      {: return ; :}
     ;

Decl = ID.id DOUBLE_COLON Type SEMICOLON       {: return ; :}
     ;

Fun = ID.id OPEN_PARENTHESIS Params.params? CLOSE_PARENTHESIS ReturnType.returnType? OPEN_CURLY_BRACE Cmd.cmd* CLOSE_CURLY_BRACE     {: return new Function(id, params, returnType, cmd); :}
    ;

ReturnType = COLON Type.type TypeList.typeList* 
           ;

TypeList = COMMA Type
         ;

Params = ID.id DOUBLE_COLON Type.type ParamsTypeList.paramsTypeList*    {: return ; :}
       ;

ParamsTypeList = COMMA ID DOUBLE_COLON Type
               ;

Type = Type.type OPEN_BRACKET CLOSE_BRACKET   {: return ; :}
     | BType.bType    {: return ; :}
     ;

BType = TYPE_INT  {: return ; :}
      | TYPE_CHAR  {: return ; :}
      | TYPE_BOOL  {: return ; :}
      | TYPE_FLOAT  {: return ; :}
      | TYPE_NAME.typeName  {: return ; :}
      ;

Cmd = OPEN_CURLY_BRACE Cmd.cmd* CLOSE_CURLY_BRACE    {: return ; :}
    | IF OPEN_PARENTHESIS Exp.exp CLOSE_PARENTHESIS Cmd.cmd    {: return ; :}
    | IF OPEN_PARENTHESIS Exp.exp CLOSE_PARENTHESIS Cmd.cmd ELSE Cmd.cmd    {: return ; :}
    | ITERATE OPEN_PARENTHESIS Exp.exp CLOSE_PARENTHESIS Cmd.cmd    {: return ; :}
    | READ LValue.lValue SEMICOLON    {: return ; :}
    | PRINT Exp.exp SEMICOLON    {: return ; :}
    | RETURN Exp.exp CmdExpList* SEMICOLON    {: return ; :}
    | LValue.lValue EQUAL Exp.exp SEMICOLON    {: return ; :}
    | ID OPEN_PARENTHESIS Exps.exps? CLOSE_PARENTHESIS ReturnParams.returnParams? SEMICOLON    {: return ; :}
    ;

CmdExpList = COMMA Exp.exp
           ;

LValueList = COMMA LValue.lvalue
           ;

ReturnParams = LESS_THAN LValue.lvalue LValueList* GREATER_THAN
             ;

Exp = Exp.expLeft AND Exp2.expRight    {: return new And(expLeft, expRight); :}
    | Exp2 
    ;

Exp2 = Exp2.expLeft COMPARISON Exp3.expRight      {: return new Equals(expLeft, expRight); :}
     | Exp2.expLeft NOT_EQUAL Exp3.expRight       {: return new NotEqual(expLeft, expRight); :} 
     | Exp3
     ;

Exp3 = Exp3.expLeft LESS_THAN Exp4.expRight   {: return new LessThan(expLeft, expRight); :}
     | Exp4
     ;

Exp4 = Exp.expLeft PLUS Exp.expRight                   {: return new Add(expLeft, expRight); :}
     | Exp.expLeft MINUS Exp.expRight                  {: return new Minus(expLeft, expRight); :}
     | Exp.expLeft TIMES Exp.expRight                  {: return new Multiplication(expLeft, expRight); :}
     | Exp.expLeft DIVISION Exp.expRight               {: return new Division(expLeft, expRight); :}
     | Exp.expLeft MODULUS Exp.expRight                {: return new Modulus(expLeft, expRight); :}
     | NOT Exp.exp                                     {: return new Not(exp); :}
     | MINUS Exp.exp                                   {: return new UnaryMinus(exp); :}
     | FALSE.false                                     {: return new False(); :}
     | TRUE.true                                       {: return new True(); :}
     | NULL                                            {: return new Null(); :}
     | INT.literalInt                                  {: return new LiteralInt(literalInt); :}
     | FLOAT.literalFloat                              {: return new LiteralFloat(literalFloat); :}
     | CHAR.literalChar                                {: return new LiteralChar(literalChar); :}
     | LValue.lValue                                   {: return lValue; :}
     | OPEN_PARENTHESIS Exp.exp CLOSE_PARENTHESIS      {: return exp; :}
     | NEW Type.type VectorDef.vectorDef?              {: return ; :}
     | ID.id OPEN_PARENTHESIS Exps.arguments? CLOSE_PARENTHESIS OPEN_BRACKET Exp.returnIndex CLOSE_BRACKET    {: return new Call(id, arguments, returnIndex); :}
     ;

VectorDef = OPEN_BRACKET Exp.exp CLOSE_BRACKET    {: return exp; :}
          ;

LValue = ID.id   {: return ; :}
       | LValue.lValue OPEN_BRACKET Exp.exp CLOSE_BRACKET  {: return ; :}
       | LValue.lValue DOT ID.id   {: return ; :}
       ;

Exps = Exp.exp ExpList.expList*     {: return ; :}
     ;

ExpList = COMMA Exp.exp
        ;