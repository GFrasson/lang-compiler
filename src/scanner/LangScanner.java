// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/scanner/lang.jflex


 /*  Esta seção é copiada antes da declaração da classe do analisador léxico.
  *  É nesta seção que se deve incluir imports e declaração de pacotes.
  *  Neste exemplo não temos nada a incluir nesta seção.
  */
package scanner;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LangScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\5\u0900\1\u0a00\1\u0b00\1\u0c00\2\u0800\1\u0d00\3\u0800"+
    "\1\u0e00\1\u0f00\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\2\u0800\1\u1900\7\u0800\1\u1a00\1\u1b00"+
    "\170\u0800\1\u1c00\1\u1d00\1\u1e00\1\u1f00\1\u2000\1\u2100\54\u0800"+
    "\10\u2200\33\u0800\1\u2300\3\u0800\1\u2400\4\u0800\1\u2500\7\u0800"+
    "\1\u2600\1\u2700\2\u0800\1\u2800\1\u2900\1\u2a00\1\u0800\1\u0a00"+
    "\1\u0800\1\u2b00\1\u2700\1\u2c00\3\u0800\1\u2000\1\u2d00\114\u0800"+
    "\1\u2e00\1\u2000\2\u0800\1\u2f00\145\u0800\1\u3000\1\u3100\1\u3200"+
    "\1\u3300\11\u0800\1\u3400\1\u2a00\6\u0800\1\u3500\7\u0800\1\u3600"+
    "\u0f0e\u0800";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\3\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\0\32\30\1\31\1\0\1\32"+
    "\1\0\1\33\1\0\1\34\3\35\1\36\1\37\5\35"+
    "\1\40\1\35\1\41\3\35\1\42\1\43\1\44\1\45"+
    "\5\35\1\46\1\0\1\47\7\0\1\3\44\0\1\35"+
    "\12\0\1\35\4\0\1\35\5\0\27\30\1\0\7\30"+
    "\30\35\1\0\10\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\2\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\2\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\2\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\1\35\1\30\1\35\2\30\1\35\3\30\2\35\4\30"+
    "\1\35\2\30\1\35\3\30\3\35\2\30\1\35\2\30"+
    "\1\35\1\30\1\35\1\30\1\35\2\30\1\35\1\30"+
    "\2\35\1\30\1\35\2\30\1\35\3\30\1\35\1\30"+
    "\1\35\2\30\2\35\1\0\1\30\3\35\4\0\1\30"+
    "\1\0\1\35\1\30\1\0\1\35\1\30\1\0\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\2\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\2\35\1\30\1\0\1\35\1\30\1\35\3\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\7\35\2\30\1\35\2\30\2\35\1\30"+
    "\1\35\4\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\105\35\1\0\44\35\7\0\2\35\36\0"+
    "\5\35\140\0\1\35\52\0\1\30\1\35\1\30\1\35"+
    "\2\0\1\30\1\35\2\0\4\35\1\0\1\30\6\0"+
    "\1\30\1\0\3\30\1\0\1\30\1\0\2\30\1\35"+
    "\21\30\1\0\11\30\43\35\1\30\2\35\3\30\3\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\5\35"+
    "\1\30\1\35\1\0\1\30\1\35\2\30\2\35\63\30"+
    "\60\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\10\0\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\2\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\2\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\0\46\30\11\0\51\35\327\0\12\22\206\0\12\22"+
    "\306\0\12\22\u019c\0\12\22\166\0\12\22\140\0\12\22"+
    "\166\0\12\22\106\0\12\22\u0116\0\12\22\106\0\12\22"+
    "\6\0\46\30\1\0\1\30\5\0\1\30\2\0\53\35"+
    "\2\0\3\35\240\0\126\30\2\0\6\35\342\0\12\22"+
    "\46\0\12\22\u012c\0\12\22\200\0\12\22\246\0\12\22"+
    "\6\0\12\22\266\0\12\22\126\0\12\22\206\0\12\22"+
    "\6\0\12\22\46\0\11\35\7\0\53\30\2\0\3\30"+
    "\100\0\300\35\100\0\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\11\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\11\35\10\30\6\35\2\0\6\30\2\0"+
    "\10\35\10\30\10\35\10\30\6\35\2\0\6\30\2\0"+
    "\10\35\1\0\1\30\1\0\1\30\1\0\1\30\1\0"+
    "\1\30\10\35\10\30\16\35\2\0\10\35\10\0\10\35"+
    "\10\0\10\35\10\0\5\35\1\0\2\35\4\30\2\0"+
    "\1\35\3\0\3\35\1\0\2\35\4\30\4\0\4\35"+
    "\2\0\2\35\4\30\4\0\10\35\5\30\5\0\3\35"+
    "\1\0\2\35\4\30\54\0\2\3\107\0\1\35\15\0"+
    "\1\35\20\0\15\35\145\0\1\30\4\0\1\30\2\0"+
    "\1\35\3\30\2\35\3\30\1\35\1\0\1\30\3\0"+
    "\5\30\6\0\1\30\1\0\1\30\1\0\1\30\1\0"+
    "\4\30\1\0\1\35\4\30\1\35\4\0\1\35\2\0"+
    "\2\35\2\30\5\0\1\30\4\35\4\0\1\35\21\0"+
    "\20\30\20\35\3\0\1\30\1\35\u0131\0\32\30\32\35"+
    "\26\0\57\30\1\0\57\35\1\0\1\30\1\35\3\30"+
    "\2\35\1\30\1\35\1\30\1\35\1\30\1\35\4\30"+
    "\1\35\1\30\2\35\1\30\10\35\3\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\2\35\6\0\1\30\1\35\1\30\1\35\3\0\1\30"+
    "\1\35\14\0\46\35\1\0\1\35\5\0\1\35\362\0"+
    "\12\22\26\0\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\22\0\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\1\35\1\30\1\35\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\204\0\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\12\35\1\30\1\35\1\30\1\35\2\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\3\0\1\30\1\35\1\30\1\35\1\0\1\30\1\35"+
    "\1\30\3\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\1\30\1\35\5\30\1\35"+
    "\5\30\1\35\1\30\1\35\1\30\1\35\1\30\1\35"+
    "\1\30\1\35\1\30\1\35\2\0\1\30\1\35\3\30"+
    "\61\0\3\35\325\0\12\22\46\0\12\22\306\0\12\22"+
    "\26\0\12\22\126\0\12\22\326\0\53\35\1\0\14\35"+
    "\10\0\120\35\60\0\12\22\6\0\u0100\3\7\35\14\0"+
    "\5\35\370\0\12\22\7\0\32\30\6\0\32\35\245\0"+
    "\50\30\50\35\120\0\12\22\6\0\44\30\4\0\44\35"+
    "\204\0\63\30\15\0\63\35\75\0\12\22\u012c\0\12\22"+
    "\200\0\12\22\74\0\12\22\220\0\12\22\u0116\0\12\22"+
    "\126\0\12\22\146\0\12\22\326\0\40\30\40\35\12\22"+
    "\146\0\12\22\106\0\12\22\266\0\12\22\326\0\40\30"+
    "\40\35\200\0\32\30\32\35\32\30\7\35\1\0\22\35"+
    "\32\30\32\35\1\30\1\0\2\30\2\0\1\30\2\0"+
    "\2\30\2\0\4\30\1\0\10\30\4\35\1\0\1\35"+
    "\1\0\7\35\1\0\13\35\32\30\32\35\2\30\1\0"+
    "\4\30\2\0\10\30\1\0\7\30\1\0\32\35\2\30"+
    "\1\0\4\30\1\0\5\30\1\0\1\30\3\0\7\30"+
    "\1\0\32\35\32\30\32\35\32\30\32\35\32\30\32\35"+
    "\32\30\32\35\32\30\32\35\32\30\34\35\2\0\31\30"+
    "\1\0\31\35\1\0\6\35\31\30\1\0\31\35\1\0"+
    "\6\35\31\30\1\0\31\35\1\0\6\35\31\30\1\0"+
    "\31\35\1\0\6\35\31\30\1\0\31\35\1\0\6\35"+
    "\1\30\1\35\2\0\62\22\100\0\12\22\266\0\42\30"+
    "\42\35\14\0\12\22\326\0\32\30\6\0\32\30\6\0"+
    "\32\30\166\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[14080];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\2\1\1\1\3\1\4"+
    "\2\2\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\4\26\1\27\1\30\1\1\1\2\1\31"+
    "\1\32\1\33\3\0\1\34\1\35\1\0\1\31\1\23"+
    "\1\0\1\31\4\26\1\36\1\37\3\0\3\26\1\0"+
    "\1\40\1\41\2\0\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\120\0\170\0\170\0\240\0\310"+
    "\0\120\0\360\0\u0118\0\120\0\120\0\120\0\120\0\120"+
    "\0\u0140\0\120\0\120\0\u0168\0\u0190\0\120\0\120\0\u01b8"+
    "\0\120\0\u01e0\0\120\0\120\0\u0208\0\u0230\0\u0258\0\u0280"+
    "\0\u02a8\0\120\0\u02d0\0\u02f8\0\120\0\170\0\170\0\u0320"+
    "\0\u0348\0\120\0\170\0\170\0\u0370\0\u01e0\0\u0398\0\u03c0"+
    "\0\u0208\0\u03e8\0\u0410\0\u0438\0\u0460\0\170\0\170\0\u0488"+
    "\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u03e8\0\u03e8"+
    "\0\u05a0\0\u05c8\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\5\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\3\3\35\1\36\1\35\1\37"+
    "\2\35\1\40\1\35\1\41\1\42\17\43\1\44\27\43"+
    "\1\6\22\0\1\45\77\0\1\5\67\0\1\45\3\0"+
    "\1\46\31\0\1\47\11\0\1\45\36\0\1\50\10\0"+
    "\1\45\44\0\1\51\2\0\1\45\25\0\2\52\4\0"+
    "\14\52\1\24\25\52\22\0\1\45\1\53\46\0\1\45"+
    "\3\0\1\54\32\0\1\55\10\0\1\56\5\0\1\57"+
    "\3\0\12\57\13\0\1\60\10\0\1\61\5\0\1\62"+
    "\3\0\12\62\13\0\1\60\10\0\1\61\5\0\1\62"+
    "\3\0\1\63\11\62\13\0\1\60\10\0\1\61\5\0"+
    "\1\62\3\0\11\62\1\64\13\0\1\60\10\0\1\61"+
    "\5\0\1\62\3\0\6\62\1\65\3\62\21\0\1\66"+
    "\2\0\1\45\25\0\17\43\1\0\27\43\50\0\1\67"+
    "\11\0\1\70\36\0\2\51\1\5\2\0\1\7\42\51"+
    "\33\0\1\71\25\0\1\55\10\0\1\57\5\0\1\57"+
    "\3\0\12\57\35\0\1\72\25\0\1\60\10\0\1\62"+
    "\5\0\1\62\3\0\12\62\13\0\1\60\10\0\1\62"+
    "\5\0\1\62\3\0\4\62\1\73\5\62\13\0\1\60"+
    "\10\0\1\62\5\0\1\62\3\0\4\62\1\74\5\62"+
    "\13\0\1\60\10\0\1\62\5\0\1\62\3\0\11\62"+
    "\1\75\2\0\3\76\2\0\43\76\11\0\1\57\47\0"+
    "\1\62\47\0\1\60\10\0\1\62\5\0\1\62\3\0"+
    "\7\62\1\75\2\62\13\0\1\60\10\0\1\62\5\0"+
    "\1\62\3\0\4\62\1\77\5\62\13\0\1\60\10\0"+
    "\1\62\5\0\1\62\3\0\2\62\1\100\7\62\13\0"+
    "\1\101\47\0\1\102\47\0\1\103\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1520];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\2\11\37\1\2\11\3\0\2\11\1\0"+
    "\2\1\1\0\5\1\2\11\3\0\3\1\1\0\2\1"+
    "\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    /* Código arbitrário pode ser inserido diretamente no analisador dessa forma. 
     * Aqui podemos declarar variáveis e métodos adicionais que julgarmos necessários. 
     */
    private int tokensAmount;
    
    public int getTokensAmount() {
       return tokensAmount;
    }

    private Token symbol(TOKEN_TYPE tokenType) {
        tokensAmount++;
        return new Token(tokenType, yytext(), yyline + 1, yycolumn + 1);   
    }

    private Token symbol(TOKEN_TYPE tokenType, Object value) {
        tokensAmount++;
        return new Token(tokenType, value, yyline + 1, yycolumn + 1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LangScanner(java.io.Reader in) {
    tokensAmount = 0; // Isto é copiado direto no construtor do lexer. 
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 35: break;
          case 2:
            { throw new RuntimeException("Illegal character <"+yytext()+">");
            }
            // fall through
          case 36: break;
          case 3:
            { return symbol(TOKEN_TYPE.NOT);
            }
            // fall through
          case 37: break;
          case 4:
            { return symbol(TOKEN_TYPE.MODULUS);
            }
            // fall through
          case 38: break;
          case 5:
            { return symbol(TOKEN_TYPE.OPEN_PARENTHESIS);
            }
            // fall through
          case 39: break;
          case 6:
            { return symbol(TOKEN_TYPE.CLOSE_PARENTHESIS);
            }
            // fall through
          case 40: break;
          case 7:
            { return symbol(TOKEN_TYPE.TIMES);
            }
            // fall through
          case 41: break;
          case 8:
            { return symbol(TOKEN_TYPE.PLUS);
            }
            // fall through
          case 42: break;
          case 9:
            { return symbol(TOKEN_TYPE.COMMA);
            }
            // fall through
          case 43: break;
          case 10:
            { return symbol(TOKEN_TYPE.MINUS);
            }
            // fall through
          case 44: break;
          case 11:
            { return symbol(TOKEN_TYPE.DOT);
            }
            // fall through
          case 45: break;
          case 12:
            { return symbol(TOKEN_TYPE.DIVISION);
            }
            // fall through
          case 46: break;
          case 13:
            { return symbol(TOKEN_TYPE.INT, Integer.parseInt(yytext()));
            }
            // fall through
          case 47: break;
          case 14:
            { return symbol(TOKEN_TYPE.COLON);
            }
            // fall through
          case 48: break;
          case 15:
            { return symbol(TOKEN_TYPE.SEMICOLON);
            }
            // fall through
          case 49: break;
          case 16:
            { return symbol(TOKEN_TYPE.LESS_THAN);
            }
            // fall through
          case 50: break;
          case 17:
            { return symbol(TOKEN_TYPE.EQUAL);
            }
            // fall through
          case 51: break;
          case 18:
            { return symbol(TOKEN_TYPE.GREATER_THAN);
            }
            // fall through
          case 52: break;
          case 19:
            { return symbol(TOKEN_TYPE.TYPE_NAME);
            }
            // fall through
          case 53: break;
          case 20:
            { return symbol(TOKEN_TYPE.OPEN_BRACKET);
            }
            // fall through
          case 54: break;
          case 21:
            { return symbol(TOKEN_TYPE.CLOSE_BRACKET);
            }
            // fall through
          case 55: break;
          case 22:
            { return symbol(TOKEN_TYPE.ID);
            }
            // fall through
          case 56: break;
          case 23:
            { return symbol(TOKEN_TYPE.OPEN_CURLY_BRACE);
            }
            // fall through
          case 57: break;
          case 24:
            { return symbol(TOKEN_TYPE.CLOSE_CURLY_BRACE);
            }
            // fall through
          case 58: break;
          case 25:
            { return symbol(TOKEN_TYPE.FLOAT, Float.parseFloat(yytext()));
            }
            // fall through
          case 59: break;
          case 26:
            { return symbol(TOKEN_TYPE.NOT_EQUAL);
            }
            // fall through
          case 60: break;
          case 27:
            { return symbol(TOKEN_TYPE.AND);
            }
            // fall through
          case 61: break;
          case 28:
            { return symbol(TOKEN_TYPE.DOUBLE_COLON);
            }
            // fall through
          case 62: break;
          case 29:
            { return symbol(TOKEN_TYPE.COMPARISON);
            }
            // fall through
          case 63: break;
          case 30:
            { yybegin(COMMENT);
            }
            // fall through
          case 64: break;
          case 31:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 65: break;
          case 32:
            { return symbol(TOKEN_TYPE.NULL);
            }
            // fall through
          case 66: break;
          case 33:
            { return symbol(TOKEN_TYPE.BOOLEAN);
            }
            // fall through
          case 67: break;
          case 34:
            { return symbol(TOKEN_TYPE.CHAR);
            }
            // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
